openapi: 3.0.3
info:
  title: Placement Portal API
  description: |-
    This is the Api documentation for the iGyaan Placement Portal, developed as part of the project for the Software Engineering course.
  version: 1.0.0
servers:
  - url: http://localhost:8000
tags:
  - name: user
    description: Operations about user
paths:
  /user/register:
    post:
      tags:
        - user
      summary: Creates a new user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: Successfully created a new user
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: The email of the user
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successfully logged in user
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get user by user ID
      description: ""
      operationId: getUserByID
      parameters:
        - name: userId
          in: path
          description: "The Id that needs to be fetched."
          required: true
          schema:
            type: number
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid User Id supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: Id that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
  /user/public:
    get:
      tags:
        - user
      summary: Get all public users
      description: ""
      operationId: getPublicUsers
      parameters: []
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserArray"
        "500":
          description: Internal Server Error
  /test-models/{id}:
    get:
      tags:
        - testModel
      summary: Get a test model by ID
      description: Retrieve a test model using its unique ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the test model to retrieve.
          schema:
            type: integer
      responses:
        "200":
          description: Successful response containing the test model.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestModel"
        "404":
          description: Test model with the provided ID was not found.
      security:
        - OAuth2: [read]
    delete:
      tags:
        - testModel
      summary: Delete a test model by ID
      description: Delete a test model using its unique ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the test model to delete.
          schema:
            type: integer
      responses:
        "204":
          description: Successful response indicating successful deletion.
        "400":
          description: Bad request. Invalid input or format.
        "404":
          description: Test model with the provided ID was not found.
        "500":
          description: Internal server error.
      security:
        - OAuth2: [read, write]
    patch:
      tags:
        - testModel
      summary: Update a test model by ID
      description: Update a test model using the provided data.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the test model to update.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTestModel"
      responses:
        "200":
          description: Successful response containing the updated test model.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestModel"
        "400":
          description: Bad request. Invalid input or format.
        "422":
          description: Validation error. Input data does not meet requirements.
        "500":
          description: Internal server error.
      security:
        - OAuth2: [read, write]
  /test-models:
    get:
      tags:
        - testModel
      summary: Get a list of test models
      description: Retrieve a list of test models based on search parameters.
      parameters:
        - name: creator_id
          in: query
          description: Filter by creator ID.
          schema:
            type: integer
        - name: title
          in: query
          description: Filter by title.
          schema:
            type: string
        - name: type
          in: query
          description: Filter by type.
          schema:
            type: string
        - name: tag
          in: query
          description: Filter by comma separated tags.
          schema:
            type: string
      responses:
        "200":
          description: Successful response containing a list of test models.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TestModel"
        "400":
          description: Bad request. Invalid input or format.
        "500":
          description: Internal server error.
    post:
      tags:
        - testModel
      summary: Create a new test model
      description: Create a new test model using the provided data.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTestModel"
      responses:
        "200":
          description: Successful response containing the created test model.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestModel"
        "400":
          description: Bad request. Invalid input or format.
        "422":
          description: Validation error. Input data does not meet requirements.
        "500":
          description: Internal server error.
      security:
        - OAuth2: [read, write]
  /post:
    put:
      tags:
        - post
      summary: Update an existing post
      description: Update an existing post by Id
      operationId: updatePost
      requestBody:
        description: Update an existent post in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
          application/xml:
            schema:
              $ref: "#/components/schemas/Post"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Post"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
            application/xml:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Invalid ID supplied
        "404":
          description: Post not found
        "405":
          description: Validation exception
      security:
        - post_auth:
            - write:posts
            - read:posts
    post:
      tags:
        - post
      summary: Add a new post to the app
      description: Add a new post to the app
      operationId: addPost
      requestBody:
        description: Create a new post in the app
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
          application/xml:
            schema:
              $ref: "#/components/schemas/Post"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Post"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
            application/xml:
              schema:
                $ref: "#/components/schemas/Post"
        "405":
          description: Invalid input
      security:
        - post_auth:
            - write:posts
            - read:posts
  /posts/:
    get:
      tags:
        - post
      summary: Fetch posts
      description: Fetch posts
      operationId: getPosts
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "400":
          description: Invalid status value
      security:
        - post_auth:
            - write:posts
            - read:posts
  /post/findByCompany:
    get:
      tags:
        - post
      summary: Finds Posts by company
      description: Multiple company ids can be provided with comma separated strings
      operationId: findPostsByCompany
      parameters:
        - name: companyIds
          in: query
          description: Company Ids that need to be considered for filter
          required: false
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "400":
          description: Invalid status value
      security:
        - post_auth:
            - write:posts
            - read:posts
  /posts/findByTags:
    get:
      tags:
        - post
      summary: Finds Posts by tags
      description: Multiple tags can be provided with comma separated strings.
      operationId: findPostsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "400":
          description: Invalid tag value
      security:
        - post_auth:
            - write:posts
            - read:posts
  /post/{postId}:
    get:
      tags:
        - post
      summary: Find post by ID
      description: Returns a single post
      operationId: getPostById
      parameters:
        - name: postId
          in: path
          description: ID of post to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
            application/xml:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Invalid ID supplied
        "404":
          description: Post not found
      security:
        - api_key: []
        - post_auth:
            - write:posts
            - read:posts
    put:
      tags:
        - post
      summary: Updates a post in the store with form data
      description: ""
      operationId: updatePostWithForm
      parameters:
        - name: postId
          in: path
          description: ID of post that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of post that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of post that needs to be updated
          schema:
            type: string
      responses:
        "405":
          description: Invalid input
      security:
        - post_auth:
            - write:posts
            - read:posts
    delete:
      tags:
        - post
      summary: Deletes a post
      description: delete a post
      operationId: deletePost
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: postId
          in: path
          description: Post id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid post value
      security:
        - post_auth:
            - write:posts
            - read:posts
  /post/{postId}/uploadImage:
    post:
      tags:
        - post
      summary: uploads an image
      description: ""
      operationId: uploadFile
      parameters:
        - name: postId
          in: path
          description: ID of post to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
        - post_auth:
            - write:posts
            - read:posts
  /company:
    put:
      tags:
        - company
      summary: Update an existing company
      description: Update an existing company by Id
      operationId: updateCompany
      requestBody:
        description: Update an existing company
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Company"
          application/xml:
            schema:
              $ref: "#/components/schemas/Company"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Company"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
            application/xml:
              schema:
                $ref: "#/components/schemas/Company"
        "400":
          description: Invalid ID supplied
        "404":
          description: company not found
        "405":
          description: Validation exception
      security:
        - companies_auth:
            - write:companies
            - read:companies
    post:
      tags:
        - company
      summary: Add a new company to the app
      description: Add a new company to the app
      operationId: addCompany
      requestBody:
        description: Create a new company in the app
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Company"
          application/xml:
            schema:
              $ref: "#/components/schemas/Company"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Company"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
            application/xml:
              schema:
                $ref: "#/components/schemas/Company"
        "405":
          description: Invalid input
      security:
        - companies_auth:
            - write:companies
            - read:companies
  /company/:
    get:
      tags:
        - company
      summary: Fetch companies
      description: Get Companies
      operationId: getCompanies
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Company"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Company"
        "400":
          description: Invalid status value
      security:
        - companies_auth:
            - write:companies
            - read:companies
  /company/{companyId}:
    get:
      tags:
        - company
      summary: Find company by ID
      description: Returns a single company
      operationId: getCompanyById
      parameters:
        - name: companyId
          in: path
          description: ID of post to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
            application/xml:
              schema:
                $ref: "#/components/schemas/Company"
        "400":
          description: Invalid ID supplied
        "404":
          description: Company not found
      security:
        - api_key: []
        - companies_auth:
            - write:companies
            - read:companies
    put:
      tags:
        - company
      summary: Updates a company with form data
      description: ""
      operationId: updateCompanyWithForm
      parameters:
        - name: companyId
          in: path
          description: ID of company that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of company that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of company that needs to be updated
          schema:
            type: string
      responses:
        "405":
          description: Invalid input
      security:
        - companies_auth:
            - write:companies
            - read:companies
    delete:
      tags:
        - company
      summary: Deletes a company
      description: delete a company
      operationId: deleteCompany
      parameters:
        - name: api_key
          in: header
          description: ""
          required: false
          schema:
            type: string
        - name: companyId
          in: path
          description: Post id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid pet value
      security:
        - companies_auth:
            - write:companies
            - read:companies
  /company/{companyId}/uploadImage:
    post:
      tags:
        - company
      summary: uploads an image
      description: ""
      operationId: uploadFile
      parameters:
        - name: companyId
          in: path
          description: ID of post to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
        - companies_auth:
            - write:posts
            - read:posts
components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        linkdin:
          type: string
          example: "https://www.linkedin.com/in/john-doe/"
        role:
          type: string
          default: student
          enum:
            - student
            - admin
            - super
        is_public:
          type: boolean
          default: false
    UserResponse:
      type: object
      properties:
        userId:
          type: number
          example: 1
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        linkdin:
          type: string
          example: "https://www.linkedin.com/in/john-doe/"
        role:
          type: string
          default: student
          enum:
            - student
            - admin
            - super
        is_public:
          type: boolean
          default: false
    UserPublic:
      type: object
      properties:
        userId:
          type: number
          example: 1
        username:
          type: string
          example: theUser
        linkdin:
          type: string
          example: "https://www.linkedin.com/in/john-doe/"
    UserArray:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/UserPublic"
    TestModel:
      type: object
      properties:
        id:
          type: integer
        creator_id:
          type: integer
        title:
          type: string
        content:
          type: string
        type:
          type: string
        tags:
          type: array
          items:
            type: string
        reviews:
          type: integer
    TestModelSearchParams:
      type: object
      properties:
        creator_id:
          type: integer
        title:
          type: string
        type:
          type: string
        tags:
          type: string
    CreateTestModel:
      type: object
      properties:
        creator_id:
          type: integer
        title:
          type: string
        content:
          type: string
        type:
          type: string
        tags:
          type: array
          items:
            type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Questions
      xml:
        name: category
    Post:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: name
        details:
          type: string
          example: details
        companyid:
          type: integer
          format: int64
          example: 10
        category:
          $ref: "#/components/schemas/Category"
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: "#/components/schemas/Tag"
      xml:
        name: post
    Company:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: name
        details:
          type: string
          example: details
        companyid:
          type: integer
          format: int64
          example: 10
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
      xml:
        name: Company

  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://your-auth-server.com/oauth/authorize
          scopes:
            read: Read access
            write: Write access
